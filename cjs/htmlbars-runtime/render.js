exports.__esModule = true;
exports.default = render;
exports.manualElement = manualElement;
exports.attachAttributes = attachAttributes;
exports.createChildMorph = createChildMorph;
exports.getCachedFragment = getCachedFragment;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _htmlbarsUtilArrayUtils = require("../htmlbars-util/array-utils");

var _htmlbarsUtilMorphUtils = require("../htmlbars-util/morph-utils");

var _nodeVisitor = require("./node-visitor");

var _nodeVisitor2 = _interopRequireDefault(_nodeVisitor);

var _morph = require("./morph");

var _morph2 = _interopRequireDefault(_morph);

var _htmlbarsUtilTemplateUtils = require("../htmlbars-util/template-utils");

var _htmlbarsUtilVoidTagNames = require('../htmlbars-util/void-tag-names');

var _htmlbarsUtilVoidTagNames2 = _interopRequireDefault(_htmlbarsUtilVoidTagNames);

var svgNamespace = "http://www.w3.org/2000/svg";

function render(template, env, scope, options) {
  var dom = env.dom;
  var contextualElement;

  if (options) {
    if (options.renderNode) {
      contextualElement = options.renderNode.contextualElement;
    } else if (options.contextualElement) {
      contextualElement = options.contextualElement;
    }
  }

  dom.detectNamespace(contextualElement);

  var renderResult = RenderResult.build(env, scope, template, options, contextualElement);
  renderResult.render();

  return renderResult;
}

function RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent) {
  this.root = rootNode;
  this.fragment = fragment;

  this.nodes = nodes;
  this.template = template;
  this.statements = template.statements.slice();
  this.env = env;
  this.scope = scope;
  this.shouldSetContent = shouldSetContent;

  this.bindScope();

  if (options.self !== undefined) {
    this.bindSelf(options.self);
  }
  if (options.blockArguments !== undefined) {
    this.bindLocals(options.blockArguments);
  }

  this.initializeNodes(ownerNode);
}

RenderResult.build = function (env, scope, template, options, contextualElement) {
  var dom = env.dom;
  var fragment = getCachedFragment(template, env);
  var nodes = template.buildRenderNodes(dom, fragment, contextualElement);

  var rootNode, ownerNode, shouldSetContent;

  if (options && options.renderNode) {
    rootNode = options.renderNode;
    ownerNode = rootNode.ownerNode;
    shouldSetContent = true;
  } else {
    rootNode = dom.createMorph(null, fragment.firstChild, fragment.lastChild, contextualElement);
    ownerNode = rootNode;
    initializeNode(rootNode, ownerNode);
    shouldSetContent = false;
  }

  if (rootNode.childNodes) {
    _htmlbarsUtilMorphUtils.visitChildren(rootNode.childNodes, function (node) {
      _htmlbarsUtilTemplateUtils.clearMorph(node, env, true);
    });
  }

  rootNode.childNodes = nodes;
  return new RenderResult(env, scope, options, rootNode, ownerNode, nodes, fragment, template, shouldSetContent);
};

function manualElement(tagName, attributes, _isEmpty) {
  var statements = [];

  for (var key in attributes) {
    if (typeof attributes[key] === 'string') {
      continue;
    }
    statements.push(["attribute", key, attributes[key]]);
  }

  var isEmpty = _isEmpty || _htmlbarsUtilVoidTagNames2.default[tagName];

  if (!isEmpty) {
    statements.push(['content', 'yield']);
  }

  var template = {
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      if (tagName === 'svg') {
        dom.setNamespace(svgNamespace);
      }
      var el1 = dom.createElement(tagName);

      for (var key in attributes) {
        if (typeof attributes[key] !== 'string') {
          continue;
        }
        dom.setAttribute(el1, key, attributes[key]);
      }

      if (!isEmpty) {
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
      }

      dom.appendChild(el0, el1);

      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment) {
      var element = dom.childAt(fragment, [0]);
      var morphs = [];

      for (var key in attributes) {
        if (typeof attributes[key] === 'string') {
          continue;
        }
        morphs.push(dom.createAttrMorph(element, key));
      }

      if (!isEmpty) {
        morphs.push(dom.createMorphAt(element, 0, 0));
      }

      return morphs;
    },
    statements: statements,
    locals: [],
    templates: []
  };

  return template;
}

function attachAttributes(attributes) {
  var statements = [];

  for (var key in attributes) {
    if (typeof attributes[key] === 'string') {
      continue;
    }
    statements.push(["attribute", key, attributes[key]]);
  }

  var template = {
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = this.element;
      if (el0.namespaceURI === "http://www.w3.org/2000/svg") {
        dom.setNamespace(svgNamespace);
      }
      for (var key in attributes) {
        if (typeof attributes[key] !== 'string') {
          continue;
        }
        dom.setAttribute(el0, key, attributes[key]);
      }

      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom) {
      var element = this.element;
      var morphs = [];

      for (var key in attributes) {
        if (typeof attributes[key] === 'string') {
          continue;
        }
        morphs.push(dom.createAttrMorph(element, key));
      }

      return morphs;
    },
    statements: statements,
    locals: [],
    templates: [],
    element: null
  };

  return template;
}

RenderResult.prototype.initializeNodes = function (ownerNode) {
  _htmlbarsUtilArrayUtils.forEach(this.root.childNodes, function (node) {
    initializeNode(node, ownerNode);
  });
};

RenderResult.prototype.render = function () {
  this.root.lastResult = this;
  this.root.rendered = true;
  this.populateNodes(_nodeVisitor.AlwaysDirtyVisitor);

  if (this.shouldSetContent && this.root.setContent) {
    this.root.setContent(this.fragment);
  }
};

RenderResult.prototype.dirty = function () {
  _htmlbarsUtilMorphUtils.visitChildren([this.root], function (node) {
    node.isDirty = true;
  });
};

RenderResult.prototype.revalidate = function (env, self, blockArguments, scope) {
  this.revalidateWith(env, scope, self, blockArguments, _nodeVisitor2.default);
};

RenderResult.prototype.rerender = function (env, self, blockArguments, scope) {
  this.revalidateWith(env, scope, self, blockArguments, _nodeVisitor.AlwaysDirtyVisitor);
};

RenderResult.prototype.revalidateWith = function (env, scope, self, blockArguments, visitor) {
  if (env !== undefined) {
    this.env = env;
  }
  if (scope !== undefined) {
    this.scope = scope;
  }
  this.updateScope();

  if (self !== undefined) {
    this.updateSelf(self);
  }
  if (blockArguments !== undefined) {
    this.updateLocals(blockArguments);
  }

  this.populateNodes(visitor);
};

RenderResult.prototype.destroy = function () {
  var rootNode = this.root;
  _htmlbarsUtilTemplateUtils.clearMorph(rootNode, this.env, true);
};

RenderResult.prototype.populateNodes = function (visitor) {
  var env = this.env;
  var scope = this.scope;
  var template = this.template;
  var nodes = this.nodes;
  var statements = this.statements;
  var i, l;

  for (i = 0, l = statements.length; i < l; i++) {
    var statement = statements[i];
    var morph = nodes[i];

    if (env.hooks.willRenderNode) {
      env.hooks.willRenderNode(morph, env, scope);
    }

    switch (statement[0]) {
      case 'block':
        visitor.block(statement, morph, env, scope, template, visitor);break;
      case 'inline':
        visitor.inline(statement, morph, env, scope, visitor);break;
      case 'content':
        visitor.content(statement, morph, env, scope, visitor);break;
      case 'element':
        visitor.element(statement, morph, env, scope, template, visitor);break;
      case 'attribute':
        visitor.attribute(statement, morph, env, scope);break;
      case 'component':
        visitor.component(statement, morph, env, scope, template, visitor);break;
    }

    if (env.hooks.didRenderNode) {
      env.hooks.didRenderNode(morph, env, scope);
    }
  }
};

RenderResult.prototype.bindScope = function () {
  this.env.hooks.bindScope(this.env, this.scope);
};

RenderResult.prototype.updateScope = function () {
  this.env.hooks.updateScope(this.env, this.scope);
};

RenderResult.prototype.bindSelf = function (self) {
  this.env.hooks.bindSelf(this.env, this.scope, self);
};

RenderResult.prototype.updateSelf = function (self) {
  this.env.hooks.updateSelf(this.env, this.scope, self);
};

RenderResult.prototype.bindLocals = function (blockArguments) {
  var localNames = this.template.locals;

  for (var i = 0, l = localNames.length; i < l; i++) {
    this.env.hooks.bindLocal(this.env, this.scope, localNames[i], blockArguments[i]);
  }
};

RenderResult.prototype.updateLocals = function (blockArguments) {
  var localNames = this.template.locals;

  for (var i = 0, l = localNames.length; i < l; i++) {
    this.env.hooks.updateLocal(this.env, this.scope, localNames[i], blockArguments[i]);
  }
};

function initializeNode(node, owner) {
  node.ownerNode = owner;
}

function createChildMorph(dom, parentMorph, contextualElement) {
  var morph = _morph2.default.empty(dom, contextualElement || parentMorph.contextualElement);
  initializeNode(morph, parentMorph.ownerNode);
  return morph;
}

function getCachedFragment(template, env) {
  var dom = env.dom,
      fragment;
  if (env.useFragmentCache && dom.canClone) {
    if (template.cachedFragment === null) {
      fragment = template.buildFragment(dom);
      if (template.hasRendered) {
        template.cachedFragment = fragment;
      } else {
        template.hasRendered = true;
      }
    }
    if (template.cachedFragment) {
      fragment = dom.cloneNode(template.cachedFragment, true);
    }
  } else if (!fragment) {
    fragment = template.buildFragment(dom);
  }

  return fragment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvcmVuZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7a0JBVXdCLE1BQU07Ozs7Ozs7O3NDQVZOLDhCQUE4Qjs7c0NBQ3hCLDhCQUE4Qjs7MkJBQzlCLGdCQUFnQjs7OztxQkFFNUIsU0FBUzs7Ozt5Q0FDQSxpQ0FBaUM7O3dDQUN4QyxpQ0FBaUM7Ozs7QUFFckQsSUFBSSxZQUFZLEdBQUcsNEJBQTRCLENBQUM7O0FBRWpDLFNBQVMsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUM1RCxNQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQ2xCLE1BQUksaUJBQWlCLENBQUM7O0FBRXRCLE1BQUksT0FBTyxFQUFFO0FBQ1gsUUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3RCLHVCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUM7S0FDMUQsTUFBTSxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtBQUNwQyx1QkFBaUIsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7S0FDL0M7R0FDRjs7QUFFRCxLQUFHLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRXZDLE1BQUksWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDeEYsY0FBWSxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUV0QixTQUFPLFlBQVksQ0FBQztDQUNyQjs7QUFFRCxTQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0FBQzNHLE1BQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOztBQUV6QixNQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNuQixNQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN6QixNQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUMsTUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDZixNQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNuQixNQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7O0FBRXpDLE1BQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7QUFFakIsTUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUFFLFFBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQUU7QUFDaEUsTUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtBQUFFLFFBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0dBQUU7O0FBRXRGLE1BQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDakM7O0FBRUQsWUFBWSxDQUFDLEtBQUssR0FBRyxVQUFTLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRTtBQUM5RSxNQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQ2xCLE1BQUksUUFBUSxHQUFHLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoRCxNQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOztBQUV4RSxNQUFJLFFBQVEsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUM7O0FBRTFDLE1BQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7QUFDakMsWUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDOUIsYUFBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDL0Isb0JBQWdCLEdBQUcsSUFBSSxDQUFDO0dBQ3pCLE1BQU07QUFDTCxZQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDN0YsYUFBUyxHQUFHLFFBQVEsQ0FBQztBQUNyQixrQkFBYyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwQyxvQkFBZ0IsR0FBRyxLQUFLLENBQUM7R0FDMUI7O0FBRUQsTUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQ3ZCLDBDQUFjLFFBQVEsQ0FBQyxVQUFVLEVBQUUsVUFBUyxJQUFJLEVBQUU7QUFDaEQsNENBQVcsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM3QixDQUFDLENBQUM7R0FDSjs7QUFFRCxVQUFRLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUM1QixTQUFPLElBQUksWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztDQUNoSCxDQUFDOztBQUVLLFNBQVMsYUFBYSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0FBQzNELE1BQUksVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFcEIsT0FBSyxJQUFJLEdBQUcsSUFBSSxVQUFVLEVBQUU7QUFDMUIsUUFBSSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7QUFBRSxlQUFTO0tBQUU7QUFDdEQsY0FBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN0RDs7QUFFRCxNQUFJLE9BQU8sR0FBRyxRQUFRLElBQUksbUNBQVEsT0FBTyxDQUFDLENBQUM7O0FBRTNDLE1BQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixjQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDdkM7O0FBRUQsTUFBSSxRQUFRLEdBQUc7QUFDYixTQUFLLEVBQUUsQ0FBQztBQUNSLGtCQUFjLEVBQUUsSUFBSTtBQUNwQixlQUFXLEVBQUUsS0FBSztBQUNsQixpQkFBYSxFQUFFLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRTtBQUN6QyxVQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUN2QyxVQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFDckIsV0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztPQUNoQztBQUNELFVBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXJDLFdBQUssSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFO0FBQzFCLFlBQUksT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQUUsbUJBQVM7U0FBRTtBQUN0RCxXQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7T0FDN0M7O0FBRUQsVUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNaLFlBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEMsV0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7T0FDM0I7O0FBRUQsU0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7O0FBRTFCLGFBQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRCxvQkFBZ0IsRUFBRSxTQUFTLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7QUFDekQsVUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLFVBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFaEIsV0FBSyxJQUFJLEdBQUcsSUFBSSxVQUFVLEVBQUU7QUFDMUIsWUFBSSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7QUFBRSxtQkFBUztTQUFFO0FBQ3RELGNBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztPQUNoRDs7QUFFRCxVQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osY0FBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUMvQzs7QUFFRCxhQUFPLE1BQU0sQ0FBQztLQUNmO0FBQ0QsY0FBVSxFQUFFLFVBQVU7QUFDdEIsVUFBTSxFQUFFLEVBQUU7QUFDVixhQUFTLEVBQUUsRUFBRTtHQUNkLENBQUM7O0FBRUYsU0FBTyxRQUFRLENBQUM7Q0FDakI7O0FBRU0sU0FBUyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7QUFDM0MsTUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVwQixPQUFLLElBQUksR0FBRyxJQUFJLFVBQVUsRUFBRTtBQUMxQixRQUFJLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtBQUFFLGVBQVM7S0FBRTtBQUN0RCxjQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3REOztBQUVELE1BQUksUUFBUSxHQUFHO0FBQ2IsU0FBSyxFQUFFLENBQUM7QUFDUixrQkFBYyxFQUFFLElBQUk7QUFDcEIsZUFBVyxFQUFFLEtBQUs7QUFDbEIsaUJBQWEsRUFBRSxTQUFTLGFBQWEsQ0FBQyxHQUFHLEVBQUU7QUFDekMsVUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN2QixVQUFJLEdBQUcsQ0FBQyxZQUFZLEtBQUssNEJBQTRCLEVBQUU7QUFDckQsV0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztPQUNoQztBQUNELFdBQUssSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFO0FBQzFCLFlBQUksT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQUUsbUJBQVM7U0FBRTtBQUN0RCxXQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7T0FDN0M7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjtBQUNELG9CQUFnQixFQUFFLFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0FBQy9DLFVBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDM0IsVUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixXQUFLLElBQUksR0FBRyxJQUFJLFVBQVUsRUFBRTtBQUMxQixZQUFJLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtBQUFFLG1CQUFTO1NBQUU7QUFDdEQsY0FBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO09BQ2hEOztBQUVELGFBQU8sTUFBTSxDQUFDO0tBQ2Y7QUFDRCxjQUFVLEVBQUUsVUFBVTtBQUN0QixVQUFNLEVBQUUsRUFBRTtBQUNWLGFBQVMsRUFBRSxFQUFFO0FBQ2IsV0FBTyxFQUFFLElBQUk7R0FDZCxDQUFDOztBQUVGLFNBQU8sUUFBUSxDQUFDO0NBQ2pCOztBQUVELFlBQVksQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFVBQVMsU0FBUyxFQUFFO0FBQzNELGtDQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQzNDLGtCQUFjLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ2pDLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN6QyxNQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDNUIsTUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE1BQUksQ0FBQyxhQUFhLGlDQUFvQixDQUFDOztBQUV2QyxNQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNqRCxRQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDckM7Q0FDRixDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFlBQVc7QUFDeEMsd0NBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBUyxJQUFJLEVBQUU7QUFBRSxRQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztHQUFFLENBQUMsQ0FBQztDQUNyRSxDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFO0FBQzdFLE1BQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsY0FBYyx3QkFBb0IsQ0FBQztDQUMxRSxDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFO0FBQzNFLE1BQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsY0FBYyxrQ0FBcUIsQ0FBQztDQUMzRSxDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRTtBQUMxRixNQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7QUFBRSxRQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztHQUFFO0FBQzFDLE1BQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtBQUFFLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQUU7QUFDaEQsTUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDOztBQUVuQixNQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7QUFBRSxRQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQUU7QUFDbEQsTUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFO0FBQUUsUUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUFFOztBQUV4RSxNQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzdCLENBQUM7O0FBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsWUFBVztBQUMxQyxNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3pCLHdDQUFXLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3RDLENBQUM7O0FBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsVUFBUyxPQUFPLEVBQUU7QUFDdkQsTUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuQixNQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLE1BQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDN0IsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2QixNQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2pDLE1BQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7QUFFVCxPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxRQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsUUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVyQixRQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFO0FBQzVCLFNBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0M7O0FBRUQsWUFBUSxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLFdBQUssT0FBTztBQUFFLGVBQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxBQUFDLE1BQU07QUFBQSxBQUNwRixXQUFLLFFBQVE7QUFBRSxlQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxBQUFDLE1BQU07QUFBQSxBQUM1RSxXQUFLLFNBQVM7QUFBRSxlQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxBQUFDLE1BQU07QUFBQSxBQUM5RSxXQUFLLFNBQVM7QUFBRSxlQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQUFBQyxNQUFNO0FBQUEsQUFDeEYsV0FBSyxXQUFXO0FBQUUsZUFBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxBQUFDLE1BQU07QUFBQSxBQUN6RSxXQUFLLFdBQVc7QUFBRSxlQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQUFBQyxNQUFNO0FBQUEsS0FDN0Y7O0FBRUQsUUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtBQUMzQixTQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzVDO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDNUMsTUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2hELENBQUM7O0FBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsWUFBVztBQUM5QyxNQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEQsQ0FBQzs7QUFFRixZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFTLElBQUksRUFBRTtBQUMvQyxNQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3JELENBQUM7O0FBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDakQsTUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN2RCxDQUFDOztBQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsY0FBYyxFQUFFO0FBQzNELE1BQUksVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDOztBQUV0QyxPQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzNDLFFBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ2xGO0NBQ0YsQ0FBQzs7QUFFRixZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLGNBQWMsRUFBRTtBQUM3RCxNQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7QUFFdEMsT0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMzQyxRQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNwRjtDQUNGLENBQUM7O0FBRUYsU0FBUyxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNuQyxNQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztDQUN4Qjs7QUFFTSxTQUFTLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUU7QUFDcEUsTUFBSSxLQUFLLEdBQUcsZ0JBQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsSUFBSSxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNqRixnQkFBYyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7QUFDL0MsTUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUc7TUFBRSxRQUFRLENBQUM7QUFDNUIsTUFBSSxHQUFHLENBQUMsZ0JBQWdCLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtBQUN4QyxRQUFJLFFBQVEsQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO0FBQ3BDLGNBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLFVBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtBQUN4QixnQkFBUSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7T0FDcEMsTUFBTTtBQUNMLGdCQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztPQUM3QjtLQUNGO0FBQ0QsUUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFO0FBQzNCLGNBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDekQ7R0FDRixNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDcEIsWUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEM7O0FBRUQsU0FBTyxRQUFRLENBQUM7Q0FDakIiLCJmaWxlIjoiaHRtbGJhcnMtcnVudGltZS9yZW5kZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXV0aWwvYXJyYXktdXRpbHNcIjtcbmltcG9ydCB7IHZpc2l0Q2hpbGRyZW4gfSBmcm9tIFwiLi4vaHRtbGJhcnMtdXRpbC9tb3JwaC11dGlsc1wiO1xuaW1wb3J0IEV4cHJlc3Npb25WaXNpdG9yIGZyb20gXCIuL25vZGUtdmlzaXRvclwiO1xuaW1wb3J0IHsgQWx3YXlzRGlydHlWaXNpdG9yIH0gZnJvbSBcIi4vbm9kZS12aXNpdG9yXCI7XG5pbXBvcnQgTW9ycGggZnJvbSBcIi4vbW9ycGhcIjtcbmltcG9ydCB7IGNsZWFyTW9ycGggfSBmcm9tIFwiLi4vaHRtbGJhcnMtdXRpbC90ZW1wbGF0ZS11dGlsc1wiO1xuaW1wb3J0IHZvaWRNYXAgZnJvbSAnLi4vaHRtbGJhcnMtdXRpbC92b2lkLXRhZy1uYW1lcyc7XG5cbnZhciBzdmdOYW1lc3BhY2UgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcih0ZW1wbGF0ZSwgZW52LCBzY29wZSwgb3B0aW9ucykge1xuICB2YXIgZG9tID0gZW52LmRvbTtcbiAgdmFyIGNvbnRleHR1YWxFbGVtZW50O1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucmVuZGVyTm9kZSkge1xuICAgICAgY29udGV4dHVhbEVsZW1lbnQgPSBvcHRpb25zLnJlbmRlck5vZGUuY29udGV4dHVhbEVsZW1lbnQ7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmNvbnRleHR1YWxFbGVtZW50KSB7XG4gICAgICBjb250ZXh0dWFsRWxlbWVudCA9IG9wdGlvbnMuY29udGV4dHVhbEVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgZG9tLmRldGVjdE5hbWVzcGFjZShjb250ZXh0dWFsRWxlbWVudCk7XG5cbiAgdmFyIHJlbmRlclJlc3VsdCA9IFJlbmRlclJlc3VsdC5idWlsZChlbnYsIHNjb3BlLCB0ZW1wbGF0ZSwgb3B0aW9ucywgY29udGV4dHVhbEVsZW1lbnQpO1xuICByZW5kZXJSZXN1bHQucmVuZGVyKCk7XG5cbiAgcmV0dXJuIHJlbmRlclJlc3VsdDtcbn1cblxuZnVuY3Rpb24gUmVuZGVyUmVzdWx0KGVudiwgc2NvcGUsIG9wdGlvbnMsIHJvb3ROb2RlLCBvd25lck5vZGUsIG5vZGVzLCBmcmFnbWVudCwgdGVtcGxhdGUsIHNob3VsZFNldENvbnRlbnQpIHtcbiAgdGhpcy5yb290ID0gcm9vdE5vZGU7XG4gIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDtcblxuICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgdGhpcy5zdGF0ZW1lbnRzID0gdGVtcGxhdGUuc3RhdGVtZW50cy5zbGljZSgpO1xuICB0aGlzLmVudiA9IGVudjtcbiAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB0aGlzLnNob3VsZFNldENvbnRlbnQgPSBzaG91bGRTZXRDb250ZW50O1xuXG4gIHRoaXMuYmluZFNjb3BlKCk7XG5cbiAgaWYgKG9wdGlvbnMuc2VsZiAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuYmluZFNlbGYob3B0aW9ucy5zZWxmKTsgfVxuICBpZiAob3B0aW9ucy5ibG9ja0FyZ3VtZW50cyAhPT0gdW5kZWZpbmVkKSB7IHRoaXMuYmluZExvY2FscyhvcHRpb25zLmJsb2NrQXJndW1lbnRzKTsgfVxuXG4gIHRoaXMuaW5pdGlhbGl6ZU5vZGVzKG93bmVyTm9kZSk7XG59XG5cblJlbmRlclJlc3VsdC5idWlsZCA9IGZ1bmN0aW9uKGVudiwgc2NvcGUsIHRlbXBsYXRlLCBvcHRpb25zLCBjb250ZXh0dWFsRWxlbWVudCkge1xuICB2YXIgZG9tID0gZW52LmRvbTtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Q2FjaGVkRnJhZ21lbnQodGVtcGxhdGUsIGVudik7XG4gIHZhciBub2RlcyA9IHRlbXBsYXRlLmJ1aWxkUmVuZGVyTm9kZXMoZG9tLCBmcmFnbWVudCwgY29udGV4dHVhbEVsZW1lbnQpO1xuXG4gIHZhciByb290Tm9kZSwgb3duZXJOb2RlLCBzaG91bGRTZXRDb250ZW50O1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVuZGVyTm9kZSkge1xuICAgIHJvb3ROb2RlID0gb3B0aW9ucy5yZW5kZXJOb2RlO1xuICAgIG93bmVyTm9kZSA9IHJvb3ROb2RlLm93bmVyTm9kZTtcbiAgICBzaG91bGRTZXRDb250ZW50ID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByb290Tm9kZSA9IGRvbS5jcmVhdGVNb3JwaChudWxsLCBmcmFnbWVudC5maXJzdENoaWxkLCBmcmFnbWVudC5sYXN0Q2hpbGQsIGNvbnRleHR1YWxFbGVtZW50KTtcbiAgICBvd25lck5vZGUgPSByb290Tm9kZTtcbiAgICBpbml0aWFsaXplTm9kZShyb290Tm9kZSwgb3duZXJOb2RlKTtcbiAgICBzaG91bGRTZXRDb250ZW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAocm9vdE5vZGUuY2hpbGROb2Rlcykge1xuICAgIHZpc2l0Q2hpbGRyZW4ocm9vdE5vZGUuY2hpbGROb2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgY2xlYXJNb3JwaChub2RlLCBlbnYsIHRydWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcm9vdE5vZGUuY2hpbGROb2RlcyA9IG5vZGVzO1xuICByZXR1cm4gbmV3IFJlbmRlclJlc3VsdChlbnYsIHNjb3BlLCBvcHRpb25zLCByb290Tm9kZSwgb3duZXJOb2RlLCBub2RlcywgZnJhZ21lbnQsIHRlbXBsYXRlLCBzaG91bGRTZXRDb250ZW50KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYW51YWxFbGVtZW50KHRhZ05hbWUsIGF0dHJpYnV0ZXMsIF9pc0VtcHR5KSB7XG4gIHZhciBzdGF0ZW1lbnRzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXNba2V5XSA9PT0gJ3N0cmluZycpIHsgY29udGludWU7IH1cbiAgICBzdGF0ZW1lbnRzLnB1c2goW1wiYXR0cmlidXRlXCIsIGtleSwgYXR0cmlidXRlc1trZXldXSk7XG4gIH1cblxuICB2YXIgaXNFbXB0eSA9IF9pc0VtcHR5IHx8IHZvaWRNYXBbdGFnTmFtZV07XG5cbiAgaWYgKCFpc0VtcHR5KSB7XG4gICAgc3RhdGVtZW50cy5wdXNoKFsnY29udGVudCcsICd5aWVsZCddKTtcbiAgfVxuXG4gIHZhciB0ZW1wbGF0ZSA9IHtcbiAgICBhcml0eTogMCxcbiAgICBjYWNoZWRGcmFnbWVudDogbnVsbCxcbiAgICBoYXNSZW5kZXJlZDogZmFsc2UsXG4gICAgYnVpbGRGcmFnbWVudDogZnVuY3Rpb24gYnVpbGRGcmFnbWVudChkb20pIHtcbiAgICAgIHZhciBlbDAgPSBkb20uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgaWYgKHRhZ05hbWUgPT09ICdzdmcnKSB7XG4gICAgICAgIGRvbS5zZXROYW1lc3BhY2Uoc3ZnTmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbDEgPSBkb20uY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzW2tleV0gIT09ICdzdHJpbmcnKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUoZWwxLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNFbXB0eSkge1xuICAgICAgICB2YXIgZWwyID0gZG9tLmNyZWF0ZUNvbW1lbnQoXCJcIik7XG4gICAgICAgIGRvbS5hcHBlbmRDaGlsZChlbDEsIGVsMik7XG4gICAgICB9XG5cbiAgICAgIGRvbS5hcHBlbmRDaGlsZChlbDAsIGVsMSk7XG5cbiAgICAgIHJldHVybiBlbDA7XG4gICAgfSxcbiAgICBidWlsZFJlbmRlck5vZGVzOiBmdW5jdGlvbiBidWlsZFJlbmRlck5vZGVzKGRvbSwgZnJhZ21lbnQpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gZG9tLmNoaWxkQXQoZnJhZ21lbnQsIFswXSk7XG4gICAgICB2YXIgbW9ycGhzID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlc1trZXldID09PSAnc3RyaW5nJykgeyBjb250aW51ZTsgfVxuICAgICAgICBtb3JwaHMucHVzaChkb20uY3JlYXRlQXR0ck1vcnBoKGVsZW1lbnQsIGtleSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzRW1wdHkpIHtcbiAgICAgICAgbW9ycGhzLnB1c2goZG9tLmNyZWF0ZU1vcnBoQXQoZWxlbWVudCwgMCwgMCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9ycGhzO1xuICAgIH0sXG4gICAgc3RhdGVtZW50czogc3RhdGVtZW50cyxcbiAgICBsb2NhbHM6IFtdLFxuICAgIHRlbXBsYXRlczogW11cbiAgfTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgdmFyIHN0YXRlbWVudHMgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGlmICh0eXBlb2YgYXR0cmlidXRlc1trZXldID09PSAnc3RyaW5nJykgeyBjb250aW51ZTsgfVxuICAgIHN0YXRlbWVudHMucHVzaChbXCJhdHRyaWJ1dGVcIiwga2V5LCBhdHRyaWJ1dGVzW2tleV1dKTtcbiAgfVxuXG4gIHZhciB0ZW1wbGF0ZSA9IHtcbiAgICBhcml0eTogMCxcbiAgICBjYWNoZWRGcmFnbWVudDogbnVsbCxcbiAgICBoYXNSZW5kZXJlZDogZmFsc2UsXG4gICAgYnVpbGRGcmFnbWVudDogZnVuY3Rpb24gYnVpbGRGcmFnbWVudChkb20pIHtcbiAgICAgIHZhciBlbDAgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICBpZiAoZWwwLm5hbWVzcGFjZVVSSSA9PT0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSB7XG4gICAgICAgIGRvbS5zZXROYW1lc3BhY2Uoc3ZnTmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlc1trZXldICE9PSAnc3RyaW5nJykgeyBjb250aW51ZTsgfVxuICAgICAgICBkb20uc2V0QXR0cmlidXRlKGVsMCwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWwwO1xuICAgIH0sXG4gICAgYnVpbGRSZW5kZXJOb2RlczogZnVuY3Rpb24gYnVpbGRSZW5kZXJOb2Rlcyhkb20pIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgdmFyIG1vcnBocyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXNba2V5XSA9PT0gJ3N0cmluZycpIHsgY29udGludWU7IH1cbiAgICAgICAgbW9ycGhzLnB1c2goZG9tLmNyZWF0ZUF0dHJNb3JwaChlbGVtZW50LCBrZXkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vcnBocztcbiAgICB9LFxuICAgIHN0YXRlbWVudHM6IHN0YXRlbWVudHMsXG4gICAgbG9jYWxzOiBbXSxcbiAgICB0ZW1wbGF0ZXM6IFtdLFxuICAgIGVsZW1lbnQ6IG51bGxcbiAgfTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cblJlbmRlclJlc3VsdC5wcm90b3R5cGUuaW5pdGlhbGl6ZU5vZGVzID0gZnVuY3Rpb24ob3duZXJOb2RlKSB7XG4gIGZvckVhY2godGhpcy5yb290LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpbml0aWFsaXplTm9kZShub2RlLCBvd25lck5vZGUpO1xuICB9KTtcbn07XG5cblJlbmRlclJlc3VsdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucm9vdC5sYXN0UmVzdWx0ID0gdGhpcztcbiAgdGhpcy5yb290LnJlbmRlcmVkID0gdHJ1ZTtcbiAgdGhpcy5wb3B1bGF0ZU5vZGVzKEFsd2F5c0RpcnR5VmlzaXRvcik7XG5cbiAgaWYgKHRoaXMuc2hvdWxkU2V0Q29udGVudCAmJiB0aGlzLnJvb3Quc2V0Q29udGVudCkge1xuICAgIHRoaXMucm9vdC5zZXRDb250ZW50KHRoaXMuZnJhZ21lbnQpO1xuICB9XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLmRpcnR5ID0gZnVuY3Rpb24oKSB7XG4gIHZpc2l0Q2hpbGRyZW4oW3RoaXMucm9vdF0sIGZ1bmN0aW9uKG5vZGUpIHsgbm9kZS5pc0RpcnR5ID0gdHJ1ZTsgfSk7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLnJldmFsaWRhdGUgPSBmdW5jdGlvbihlbnYsIHNlbGYsIGJsb2NrQXJndW1lbnRzLCBzY29wZSkge1xuICB0aGlzLnJldmFsaWRhdGVXaXRoKGVudiwgc2NvcGUsIHNlbGYsIGJsb2NrQXJndW1lbnRzLCBFeHByZXNzaW9uVmlzaXRvcik7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLnJlcmVuZGVyID0gZnVuY3Rpb24oZW52LCBzZWxmLCBibG9ja0FyZ3VtZW50cywgc2NvcGUpIHtcbiAgdGhpcy5yZXZhbGlkYXRlV2l0aChlbnYsIHNjb3BlLCBzZWxmLCBibG9ja0FyZ3VtZW50cywgQWx3YXlzRGlydHlWaXNpdG9yKTtcbn07XG5cblJlbmRlclJlc3VsdC5wcm90b3R5cGUucmV2YWxpZGF0ZVdpdGggPSBmdW5jdGlvbihlbnYsIHNjb3BlLCBzZWxmLCBibG9ja0FyZ3VtZW50cywgdmlzaXRvcikge1xuICBpZiAoZW52ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5lbnYgPSBlbnY7IH1cbiAgaWYgKHNjb3BlICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zY29wZSA9IHNjb3BlOyB9XG4gIHRoaXMudXBkYXRlU2NvcGUoKTtcblxuICBpZiAoc2VsZiAhPT0gdW5kZWZpbmVkKSB7IHRoaXMudXBkYXRlU2VsZihzZWxmKTsgfVxuICBpZiAoYmxvY2tBcmd1bWVudHMgIT09IHVuZGVmaW5lZCkgeyB0aGlzLnVwZGF0ZUxvY2FscyhibG9ja0FyZ3VtZW50cyk7IH1cblxuICB0aGlzLnBvcHVsYXRlTm9kZXModmlzaXRvcik7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3ROb2RlID0gdGhpcy5yb290O1xuICBjbGVhck1vcnBoKHJvb3ROb2RlLCB0aGlzLmVudiwgdHJ1ZSk7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLnBvcHVsYXRlTm9kZXMgPSBmdW5jdGlvbih2aXNpdG9yKSB7XG4gIHZhciBlbnYgPSB0aGlzLmVudjtcbiAgdmFyIHNjb3BlID0gdGhpcy5zY29wZTtcbiAgdmFyIHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgdmFyIHN0YXRlbWVudHMgPSB0aGlzLnN0YXRlbWVudHM7XG4gIHZhciBpLCBsO1xuXG4gIGZvciAoaT0wLCBsPXN0YXRlbWVudHMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgIHZhciBzdGF0ZW1lbnQgPSBzdGF0ZW1lbnRzW2ldO1xuICAgIHZhciBtb3JwaCA9IG5vZGVzW2ldO1xuXG4gICAgaWYgKGVudi5ob29rcy53aWxsUmVuZGVyTm9kZSkge1xuICAgICAgZW52Lmhvb2tzLndpbGxSZW5kZXJOb2RlKG1vcnBoLCBlbnYsIHNjb3BlKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHN0YXRlbWVudFswXSkge1xuICAgICAgY2FzZSAnYmxvY2snOiB2aXNpdG9yLmJsb2NrKHN0YXRlbWVudCwgbW9ycGgsIGVudiwgc2NvcGUsIHRlbXBsYXRlLCB2aXNpdG9yKTsgYnJlYWs7XG4gICAgICBjYXNlICdpbmxpbmUnOiB2aXNpdG9yLmlubGluZShzdGF0ZW1lbnQsIG1vcnBoLCBlbnYsIHNjb3BlLCB2aXNpdG9yKTsgYnJlYWs7XG4gICAgICBjYXNlICdjb250ZW50JzogdmlzaXRvci5jb250ZW50KHN0YXRlbWVudCwgbW9ycGgsIGVudiwgc2NvcGUsIHZpc2l0b3IpOyBicmVhaztcbiAgICAgIGNhc2UgJ2VsZW1lbnQnOiB2aXNpdG9yLmVsZW1lbnQoc3RhdGVtZW50LCBtb3JwaCwgZW52LCBzY29wZSwgdGVtcGxhdGUsIHZpc2l0b3IpOyBicmVhaztcbiAgICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHZpc2l0b3IuYXR0cmlidXRlKHN0YXRlbWVudCwgbW9ycGgsIGVudiwgc2NvcGUpOyBicmVhaztcbiAgICAgIGNhc2UgJ2NvbXBvbmVudCc6IHZpc2l0b3IuY29tcG9uZW50KHN0YXRlbWVudCwgbW9ycGgsIGVudiwgc2NvcGUsIHRlbXBsYXRlLCB2aXNpdG9yKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGVudi5ob29rcy5kaWRSZW5kZXJOb2RlKSB7XG4gICAgICBlbnYuaG9va3MuZGlkUmVuZGVyTm9kZShtb3JwaCwgZW52LCBzY29wZSk7XG4gICAgfVxuICB9XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLmJpbmRTY29wZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVudi5ob29rcy5iaW5kU2NvcGUodGhpcy5lbnYsIHRoaXMuc2NvcGUpO1xufTtcblxuUmVuZGVyUmVzdWx0LnByb3RvdHlwZS51cGRhdGVTY29wZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVudi5ob29rcy51cGRhdGVTY29wZSh0aGlzLmVudiwgdGhpcy5zY29wZSk7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLmJpbmRTZWxmID0gZnVuY3Rpb24oc2VsZikge1xuICB0aGlzLmVudi5ob29rcy5iaW5kU2VsZih0aGlzLmVudiwgdGhpcy5zY29wZSwgc2VsZik7XG59O1xuXG5SZW5kZXJSZXN1bHQucHJvdG90eXBlLnVwZGF0ZVNlbGYgPSBmdW5jdGlvbihzZWxmKSB7XG4gIHRoaXMuZW52Lmhvb2tzLnVwZGF0ZVNlbGYodGhpcy5lbnYsIHRoaXMuc2NvcGUsIHNlbGYpO1xufTtcblxuUmVuZGVyUmVzdWx0LnByb3RvdHlwZS5iaW5kTG9jYWxzID0gZnVuY3Rpb24oYmxvY2tBcmd1bWVudHMpIHtcbiAgdmFyIGxvY2FsTmFtZXMgPSB0aGlzLnRlbXBsYXRlLmxvY2FscztcblxuICBmb3IgKHZhciBpPTAsIGw9bG9jYWxOYW1lcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgdGhpcy5lbnYuaG9va3MuYmluZExvY2FsKHRoaXMuZW52LCB0aGlzLnNjb3BlLCBsb2NhbE5hbWVzW2ldLCBibG9ja0FyZ3VtZW50c1tpXSk7XG4gIH1cbn07XG5cblJlbmRlclJlc3VsdC5wcm90b3R5cGUudXBkYXRlTG9jYWxzID0gZnVuY3Rpb24oYmxvY2tBcmd1bWVudHMpIHtcbiAgdmFyIGxvY2FsTmFtZXMgPSB0aGlzLnRlbXBsYXRlLmxvY2FscztcblxuICBmb3IgKHZhciBpPTAsIGw9bG9jYWxOYW1lcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgdGhpcy5lbnYuaG9va3MudXBkYXRlTG9jYWwodGhpcy5lbnYsIHRoaXMuc2NvcGUsIGxvY2FsTmFtZXNbaV0sIGJsb2NrQXJndW1lbnRzW2ldKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGUobm9kZSwgb3duZXIpIHtcbiAgbm9kZS5vd25lck5vZGUgPSBvd25lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoaWxkTW9ycGgoZG9tLCBwYXJlbnRNb3JwaCwgY29udGV4dHVhbEVsZW1lbnQpIHtcbiAgdmFyIG1vcnBoID0gTW9ycGguZW1wdHkoZG9tLCBjb250ZXh0dWFsRWxlbWVudCB8fCBwYXJlbnRNb3JwaC5jb250ZXh0dWFsRWxlbWVudCk7XG4gIGluaXRpYWxpemVOb2RlKG1vcnBoLCBwYXJlbnRNb3JwaC5vd25lck5vZGUpO1xuICByZXR1cm4gbW9ycGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZWRGcmFnbWVudCh0ZW1wbGF0ZSwgZW52KSB7XG4gIHZhciBkb20gPSBlbnYuZG9tLCBmcmFnbWVudDtcbiAgaWYgKGVudi51c2VGcmFnbWVudENhY2hlICYmIGRvbS5jYW5DbG9uZSkge1xuICAgIGlmICh0ZW1wbGF0ZS5jYWNoZWRGcmFnbWVudCA9PT0gbnVsbCkge1xuICAgICAgZnJhZ21lbnQgPSB0ZW1wbGF0ZS5idWlsZEZyYWdtZW50KGRvbSk7XG4gICAgICBpZiAodGVtcGxhdGUuaGFzUmVuZGVyZWQpIHtcbiAgICAgICAgdGVtcGxhdGUuY2FjaGVkRnJhZ21lbnQgPSBmcmFnbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXBsYXRlLmhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlLmNhY2hlZEZyYWdtZW50KSB7XG4gICAgICBmcmFnbWVudCA9IGRvbS5jbG9uZU5vZGUodGVtcGxhdGUuY2FjaGVkRnJhZ21lbnQsIHRydWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghZnJhZ21lbnQpIHtcbiAgICBmcmFnbWVudCA9IHRlbXBsYXRlLmJ1aWxkRnJhZ21lbnQoZG9tKTtcbiAgfVxuXG4gIHJldHVybiBmcmFnbWVudDtcbn1cbiJdfQ==